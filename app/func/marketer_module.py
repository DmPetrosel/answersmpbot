from aiogram.fsm.context import FSMContext
from aiogram import F
from aiogram.filters import StateFilter
from db.get import *
from keyboard.marketer_kb import *
from aiogram import types
from func.states import *
from datetime import datetime, timedelta
from db.set import *
import configparser
from aiogram.filters.command import Command
import configparser
import re
from aide import MyBot
import logging, traceback
import asyncio
user_obj = {}
promos_dict = {}
promo_temp = {}
config = configparser.ConfigParser()
config.read('config.ini') 
bot_link = config.get('bot', 'link')
default_promo_name = "good_start"
DESCRIPTION = "üöÄ –ë—É–¥—å—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–π. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤—ã –±—ã—Å—Ç—Ä–µ–µ –∏ –ª–µ–≥—á–µ. \n\nüí™ SSet –ê–û—Ç–≤–µ—Ç—ã - –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –í–ë"
async def marketer(message: types.Message, state: FSMContext, bot: MyBot):
    '''–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∞–º–æ–∑–∞–Ω—è—Ç—ã–º –∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∫–∞–∫ –ø—Ä–æ–¥–∞–∂–∞.
    –£ –º–∞—Ä–∫—Ç–æ–ª–æ–≥–∞ –±—É–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:
        - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å. 
    –û–Ω —Å–º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:
        –∞)–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã, 
        –±)—Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å —Ç–æ–π —Ü–µ–Ω–æ–π, –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –ø–æ—Å—á–∏—Ç–∞–µ—Ç –Ω—É–∂–Ω–æ–π, –∫–æ–º–∏—Å—Å–∏—é –æ–Ω –ø–æ–ª—É—á–∏—Ç 10%,
        –≤)—É–¥–∞–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã. 
    
    –î–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç 
        1.—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ü–µ–Ω—É, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ 30 –∫, 
        2.—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É, 
        3.–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥
    '''
    chat_id = message.chat.id
    user_obj[chat_id] = await get_user(chat_id)
    balance = user_obj[chat_id].balance
    await bot.send_message(chat_id,  f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}", reply_markup=marketer_menu_kb())
    if not await get_promo_by_kwargs_last(chat_id=chat_id):
        await default_promo(message, state, bot)
    def_promo = await get_promo_by_kwargs_last(chat_id=chat_id)
    await bot.send_message(chat_id, f"{DESCRIPTION}\n\n<b>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{def_promo.promocode}</code>\nüíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{def_promo.price} –†</code>\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{(def_promo.expire_date).strftime('%d.%m.%Y')}</code>\n\n‚ö°Ô∏è –°—Å—ã–ª–∫–∞: <code>https://t.me/{bot_link}?start={def_promo.referal}</code>", parse_mode='html')
    msg = await bot.send_message(chat_id, f"‚ÑπÔ∏è –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º! üó£ –í—ã –ø–æ–ª—É—á–∏—Ç–µ 30% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ üí∞, –∞ —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∏—Ç +20% –∫ –µ–≥–æ —Å—É–º–º–µ, –µ—Å–ª–∏ –æ–Ω –æ–ø–ª–∞—Ç–∏—Ç —Å—Ä–∞–∑—É üíµ.\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ –¥—Ä—É–≥—É—é —Å—É–º–º—É.")
    await asyncio.sleep(20)
    await msg.delete()
async def default_promo(message : types.Message, state: FSMContext, bot):
    try:
        promos_dict[message.from_user.id] = {}
        promos_dict[message.from_user.id]['promocode'] = default_promo_name+"__"+str(message.chat.id)
        promos_dict[message.from_user.id]['price'] = int(("6 000").replace(' ','').replace('.','').replace(',',''))
        promos_dict[message.from_user.id]['expire_date'] = (datetime.now() + timedelta(days=14)).date()
        n_promo= await create_promo(message, state,  bot)
        p_name = (n_promo.promocode).split('__')[0] + str(n_promo.id)
        p_referal = (n_promo.referal).split('__')[0] + str(n_promo.id)
        result = await update_promo(id=n_promo.id, promocode=p_name, referal=p_referal)
    except Exception as e:
        logging.error(f"Error default_promo:59 {e} {traceback.print_exec}")
    return result
async def callback_marketer(call: types.CallbackQuery, state: FSMContext, bot: MyBot):
    # await call.answer(cache_time=60)
    print('callback marketer')
    if call.data == 'my_promos':
        promos_list = await get_all_promos(call.from_user.id)
        dictionry = [f"–ü—Ä–æ–º–æ–∫–æ–¥: {i.promocode}\n–¶–µ–Ω–∞: {i.price}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {i.expire_date}\n–ü–µ—Ä–µ—Ö–æ–¥—ã: {i.quantity}\n–í–∞—à –Ω–∏–∫: {i.user.username}\nC—Å—ã–ª–∫–∞: <code>https://t.me/{bot_link}?start={i.referal}</code>\n[–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ /edit_promo_{i.id}]\n\n" for i in promos_list]

        txt = ''.join(dictionry)
        await call.message.edit_text(f"–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã: \n\n {txt}", reply_markup=marketer_menu_kb(), parse_mode='html')
    elif call.data == 'create_promo':
        promos_dict[call.from_user.id] = {}
        await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥')
        await state.set_state('promo_name_state')
    #     promocodes = await get_promocodes(call.from_user.id)
    #     if promocodes:
    #         await call.message.edit_text(f"–í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã: \n{promocodes}", reply_markup=marketer_menu_kb)

async def new_promo(message:types.Message, state: FSMContext, bot: MyBot):
    var = message.text
    if await state.get_state() == 'promo_name_state':
        if re.match('[a-z0-9_]', var.lower()):
            promos_dict[message.from_user.id]['promocode'] = var.lower()
            await bot.send_message(message.from_user.id, text= '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.')
            await state.set_state('promo_price_state')
        else:
            await bot.send_message(message.from_user.id, text= '–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è')
            await state.set_state('promo_name_state')
    elif await state.get_state() == 'promo_price_state':
        promos_dict[message.from_user.id]['price'] = int(var.replace(' ','').replace('.','').replace(',','').strip())
        if promos_dict[message.from_user.id]['price'] < 0:
            await message.reply('–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –µ—â—ë —Ä–∞–∑.')
            await state.set_state('promo_price_state')
            return
        await bot.send_message(message.from_user.id, text= '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy\n –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø—Ä–æ–º–æ–∫–æ–¥ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –≥–æ–¥. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ 0')
        await state.set_state('promo_expire_date_state')
    elif await state.get_state() == 'promo_expire_date_state':
        promos_dict[message.from_user.id]['expire_date'] = var
        if var == '0':
            try:
                promos_dict[message.from_user.id]['expire_date'] = (datetime.now() + timedelta(days=365)).date()
            except Exception as e:
                logging.error(f"Error new_promo:105 {e} {traceback.print_exc()}")
        else:
            try: 
                date_var = datetime.strptime(var, '%d.%m.%Y')
                promos_dict[message.from_user.id]['expire_date'] = date_var.date()
            except Exception as e: 
                await bot.send_message(message.from_user.id, text= f'–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.')
                state.set_state('expiering_date_state')
                return
            if datetime.strptime(var, '%d.%m.%Y').date() < datetime.now().date():
                await bot.send_message(message.from_user.id, text= '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã')
                await state.set_state('promo_expire_date_state')
                return
            
        n_promo = await create_promo(message, state, bot)
        await bot.send_message(message.chat.id, f"{DESCRIPTION}\n\n<b>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{n_promo.promocode}</code>\nüíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É: <code>{n_promo.price} –†</code>\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{(n_promo.expire_date).strftime('%d.%m.%Y')}</code>\n\n‚ö°Ô∏è –°—Å—ã–ª–∫–∞: <code>https://t.me/{bot_link}?start={n_promo.referal}</code>", parse_mode='html')

    else:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        
async def edit_promo(message : types.Message, state: FSMContext, bot: MyBot):

    promocode_id = message.text.split('_')[-1]
    promocode_id = int(promocode_id)
    promos_dict[message.from_user.id] = {}
    prom = await get_promo_by_id(promocode_id)
    promos_dict[message.from_user.id]['promocode'] = prom.promocode
    promos_dict[message.from_user.id]['cdatetime.strptime(hat_id'] = prom.chat_id
    promos_dict[message.from_user.id]['id'] = promocode_id
    promos_dict[message.from_user.id]['referal'] = prom.referal
    config = configparser.ConfigParser()
    config.read('config.ini') 
    support = config.get('support', 'support')
    promo_temp[message.from_user.id] = {}
    promo_temp[message.from_user.id]['obj'] = await get_promo_by_id(promocode_id)
    if promo_temp[message.from_user.id]['obj'].chat_id != message.from_user.id:
        message.edit_text(f"–í—Ä–æ–¥–µ –±—ã —ç—Ç–æ –Ω–µ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ: {support}")
    else:
        if promo_temp[message.from_user.id]:
            promos_dict[message.from_user.id]['promocode'] = promo_temp[message.from_user.id]['obj'].promocode
            promo_temp[message.from_user.id]['is_updating'] = True
            await bot.send_message(message.from_user.id, text= '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É')
            await state.set_state('promo_price_state')
        else:
            await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
async def create_promo(message : types.Message, state: FSMContext, bot :MyBot):
    promos_dict[message.from_user.id]['chat_id'] = message.from_user.id  
    promos_dict[message.from_user.id]['referal'] = f'{message.from_user.id}_{promos_dict[message.from_user.id]["promocode"]}'.replace(' ', '_')
    try:
        if promo_temp.get(message.chat.id) and promo_temp[message.from_user.id].get('is_updating'):
            promo_temp[message.from_user.id]['is_updating'] = False
            n_promo = await update_promo(promos_dict[message.from_user.id])
        else:
            n_promo = await add_promocode(promos_dict[message.from_user.id])
            return n_promo
    except SQLAlchemyError:
        await bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
        await state.set_state("promo_name_state")
        # await bot.send_message(message.chat.id, f"{DESCRIPTION}\n\n<b>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{n_promo.promocode}</code>\nüíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É: <code>{n_promo.price} –†</code>\nüìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <code>{(n_promo.expire_date).strftime('%d.%m.%Y')}</code>\n\n‚ö°Ô∏è –°—Å—ã–ª–∫–∞: <code>https://t.me/{bot_link}?start={n_promo.referal}</code>", parse_mode='html')
        return 
    await marketer(message,state, bot)
    

